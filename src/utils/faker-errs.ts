import { faker } from '@faker-js/faker';
import { poolConn } from '../database/conn';

function generateLog() {
    let arrIndex = faker.number.int({ min: 0, max: 3 })
    let fileIndex = faker.number.int({ min: 0, max: 5 });
    let fileDirsIndex = faker.number.int({ min: 0, max: 8 });
    let maxMsgPicked = faker.number.int({ min: 50, max: 1000 });
    let code;
    
    const project_id = 42; // Hardcoded project ID provide your own if needed
    const type = ['Critical', 'General', 'Warning', 'Other'][arrIndex];
    
    switch (type) {
        case 'Critical':
            code = faker.number.int({ min: 500, max: 599 }).toString();
        break;

        case 'General':
            code = faker.number.int({ min: 410, max: 499 }).toString();
        break;

        case 'Warning':
            code = faker.number.int({ min: 400, max: 410 }).toString();
        break;

        case 'Other':
            code = faker.number.int({ min: 1, max: 199 }).toString();
        break;

        default:
            code = '111';
        break;
    }
    const fileDirs = ['libs', 'dist', 'db', 'users', 'admin', 'api', 'utils', 'config', 'backup']
    const fileExt = ['js', 'ts', 'php', 'jar', 'go', 'wss']
    const pickedFileExt = fileExt[fileIndex];
    const pickedFileDirs = fileDirs[fileDirsIndex];

    const location = `@/${pickedFileDirs}/${faker.system.commonFileName(pickedFileExt)}`;
    const message = faker.lorem.text().substring(0, maxMsgPicked);
    const timestamp = faker.date.between({from: '2024-02-14', to: '2024-04-14'})
    
    return { project_id, type, code, location, message, timestamp };
}

async function generateErrors() {
    const pool = await poolConn();
    if (!pool) {
        return;
    }

    try {
        const logs = [];

        for (let i = 0; i < 100; i++) {
            logs.push(generateLog());
        }

        for (const log of logs) {
            const query = `
                INSERT INTO errors (project_id, type, code, location, message, timestamp) VALUES (?, ?, ?, ?, ?, ?);
            `
            await pool.query(query, [log.project_id, log.type, log.code, log.location, log.message, log.timestamp]);
        }

    } catch (error) {
        console.error('Error in @/utils/faker-errs.ts generated by func generateErrors details: ', error)
    } finally {
        pool.release();
        console.log('Errors generated successfully');
        process.exit(0);
    };
}

generateErrors();